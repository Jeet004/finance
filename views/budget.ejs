<div class="container mt-5">
    <div class="row">
        <div class="col-12">
            <h1 class="text-center mb-4">Budget Planning</h1>
        </div>
    </div>

    <!-- Budget Overview Charts -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Expense Distribution</h5>
                    <canvas id="expenseChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Budget vs Actual</h5>
                    <canvas id="budgetChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Budget Setting Form -->
    <div class="card mb-4">
        <div class="card-body">
            <h5 class="card-title">Set Monthly Budget</h5>
            <form action="/budget/set" method="POST">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="category" class="form-label">Category</label>
                        <select class="form-select" id="category" name="category" required>
                            <option value="Food">Food</option>
                            <option value="Transport">Transport</option>
                            <option value="Housing & Rent">Housing & Rent</option>
                            <option value="Utilities">Utilities</option>
                            <option value="Healthcare">Healthcare</option>
                            <option value="Entertainment">Entertainment</option>
                            <option value="Shopping">Shopping</option>
                            <option value="Education">Education</option>
                            <option value="Bills & Payments">Bills & Payments</option>
                            <option value="Insurance">Insurance</option>
                            <option value="Travel">Travel</option>
                            <option value="Groceries">Groceries</option>
                            <option value="Personal Care">Personal Care</option>
                            <option value="Gifts & Donations">Gifts & Donations</option>
                            <option value="Business Expenses">Business Expenses</option>
                            <option value="Other Expenses">Other Expenses</option>
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="amount" class="form-label">Budget Amount</label>
                        <input type="number" class="form-control" id="amount" name="amount" required>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Set Budget</button>
            </form>
        </div>
    </div>

    <!-- Budget Overview Table -->
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Budget Overview</h5>
            <table class="table">
                <thead>
                    <tr>
                        <th>Category</th>
                        <th>Budget</th>
                        <th>Spent</th>
                        <th>Remaining</th>
                        <th>Progress</th>
                    </tr>
                </thead>
                <tbody id="budgetTableBody">
                    <!-- Will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
// Convert server-side data to chart format
// How the data is structured
const expenseData = {
    labels: <%- JSON.stringify(expenseData.map(item => item.category)) %>,
    data: <%- JSON.stringify(expenseData.map(item => parseFloat(item.total || 0))) %>
};

const budgetData = {
    labels: <%- JSON.stringify(budgetData.map(item => item.category)) %>,
    budget: <%- JSON.stringify(budgetData.map(item => parseFloat(item.amount || 0))) %>,
    actual: <%- JSON.stringify(budgetData.map(item => {
        const matchingExpense = expenseData.find(exp => exp.category === item.category);
        return parseFloat(matchingExpense ? matchingExpense.total : 0);
    })) %>
};

// Initialize charts with real data
const expenseChart = new Chart(document.getElementById('expenseChart'), {
    type: 'pie',
    data: {
        labels: expenseData.labels,
        datasets: [{
            data: expenseData.data,
            backgroundColor: [
                '#FF6384', // Red
                '#36A2EB', // Blue
                '#FFCE56', // Yellow
                '#4BC0C0', // Teal
                '#9966FF', // Purple
                '#FF9F40', // Orange
                '#FF99CC', // Pink
                '#00CC99', // Green
                '#6699FF', // Light Blue
                '#FF99FF', // Light Purple
                '#99FF99', // Light Green
                '#FFCC99', // Light Orange
                '#99CCFF', // Sky Blue
                '#FF9999', // Light Red
                '#99FF99', // Mint
                '#FFFF99'  // Light Yellow
            ]
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'right',
                labels: {
                    boxWidth: 12
                }
            }
        }
    }
});

// After initializing the charts
const budgetChart = new Chart(document.getElementById('budgetChart'), {
    type: 'bar',
    data: {
        labels: budgetData.labels,
        datasets: [{
            label: 'Budget',
            data: budgetData.budget,
            backgroundColor: '#36A2EB',
            order: 1,
            barPercentage: 0.8
        }, {
            label: 'Actual',
            data: budgetData.actual,
            backgroundColor: '#FF6384',
            order: 2,
            barPercentage: 0.8
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            y: {
                beginAtZero: true,
                ticks: {
                    callback: function(value) {
                        return '$' + value.toFixed(2);
                    }
                }
            },
            x: {
                grid: {
                    display: false
                }
            }
        },
        plugins: {
            legend: {
                position: 'top'
            }
        }
    }
});

// Add this line
updateBudgetTable(); // Initial table update

// Update budget table with real data
function getProgressBarColor(percentage) {
    if (percentage > 90) return 'bg-danger';
    if (percentage > 75) return 'bg-warning';
    return 'bg-success';
}

function updateBudgetTable() {
    const tableBody = document.getElementById('budgetTableBody');
    let html = '';
    
    // Get all unique categories from both expense and budget data
    const allCategories = [...new Set([
        'Food',
        'Transport',
        'Housing & Rent',
        'Utilities',
        'Healthcare',
        'Entertainment',
        'Shopping',
        'Education',
        'Bills & Payments',
        'Insurance',
        'Travel',
        'Groceries',
        'Personal Care',
        'Gifts & Donations',
        'Business Expenses',
        'Other Expenses'
    ])];
    
    allCategories.forEach(category => {
        const budgetIndex = budgetData.labels.indexOf(category);
        const expenseIndex = expenseData.labels.indexOf(category);
        
        const budget = budgetIndex >= 0 ? budgetData.budget[budgetIndex] : 0;
        const actual = expenseIndex >= 0 ? expenseData.data[expenseIndex] : 0;
        const remaining = Math.max(0, budget - actual);
        const percentage = budget > 0 ? (actual / budget * 100).toFixed(1) : 0;
        
        html += `
            <tr>
                <td>${category}</td>
                <td>$${budget.toFixed(2)}</td>
                <td>$${actual.toFixed(2)}</td>
                <td>$${remaining.toFixed(2)}</td>
                <td>
                    <div class="progress">
                        <div class="progress-bar ${getProgressBarColor(percentage)}" 
                             role="progressbar" 
                             style="width: ${Math.min(100, percentage)}%" 
                             aria-valuenow="${percentage}" 
                             aria-valuemin="0" 
                             aria-valuemax="100">
                            ${percentage}%
                        </div>
                    </div>
                </td>
            </tr>
        `;
    });
    
    tableBody.innerHTML = html;
}

// Auto-refresh data every 5 minutes
setInterval(() => {
    fetch('/api/budget-data')
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (!data || !data.expenseData || !data.budgetData) {
                throw new Error('Invalid data format received');
            }
            
            // Update chart data
            expenseChart.data.labels = data.expenseData.labels || [];
            expenseChart.data.datasets[0].data = data.expenseData.data || [];
            expenseChart.update();

            budgetChart.data.labels = data.budgetData.labels || [];
            budgetChart.data.datasets[0].data = data.budgetData.budget || [];
            budgetChart.data.datasets[1].data = data.budgetData.actual || [];
            budgetChart.update();

            // Update global data
            expenseData = data.expenseData;
            budgetData = data.budgetData;

            // Update table
            updateBudgetTable();
        })
        .catch(error => {
            console.error('Error fetching budget data:', error);
            const errorDiv = document.createElement('div');
            errorDiv.className = 'alert alert-danger mt-3';
            errorDiv.textContent = 'Failed to update budget data. Please refresh the page.';
            document.querySelector('.container').prepend(errorDiv);
            setTimeout(() => errorDiv.remove(), 5000);
        });
}, 300000); // 5 minutes
document.querySelector('form').addEventListener('submit', function(e) {
    const amount = document.getElementById('amount').value;
    if (amount <= 0) {
        e.preventDefault();
        alert('Budget amount must be greater than 0');
        return false;
    }
    if (amount > 1000000) {
        e.preventDefault();
        alert('Budget amount cannot exceed 1,000,000');
        return false;
    }
});
</script>